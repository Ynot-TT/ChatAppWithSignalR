@page "/"
@using ChatApplWithSignalR.Models
@using Ganss.Xss
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Encodings.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager

<PageTitle>The Chat</PageTitle>


<div class="body">
        <div class="username-container">
            <input type="text"
                   placeholder="Enter username"
                   class="username-input @((isUsernameStated) ? "" : "error")"
                   @bind="username" />  
        </div>
        <div class="container">
            <div class="card-body">
              
                <div class="message-card">
                    <ul class="list-group">
                    @foreach (var message in Messages)
                    {
                        <li class="message-bubble @(message.IsSentByUser ? "sent" : "received")">
                            @($"{message.Username}: {message.Message}")
                        </li>
                    }
                    </ul>
                </div>
                <div class="border-primary">
                </div>
            </div>
           
        </div>
        <div class="message-send-container">
            <div class="message-input">
                <input type="text" placeholder="Enter a message" class="message-input-box" @bind="message" />
                <button class="btn-send" @onclick="Send" disabled="@(string.IsNullOrWhiteSpace(message))">Send</button>
            </div>
        </div>
</div>

@code {
    private HubConnection? hubConnection;
    private List<ChatMessage> Messages = new List<ChatMessage>();
      
    private string? username;
    private string? message;
    private bool isUsernameStated = true;


    protected async override Task OnInitializedAsync()
    {
        var sanitizer = new HtmlSanitizer();

        // Create a new connection to the SignalR hub
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .Build();

        //Receive messages from the server
        hubConnection.On<string, string>("ReceiveMessage", (username, message) =>
        {
            //Sanitize the username and message, prevents XSS
            string sanitizedUsername = sanitizer.Sanitize(username);
            string sanitizedMessage = sanitizer.Sanitize(message);

            //Create a message object, adds to the list
            var chatMessage = new ChatMessage
                {
                    Username = sanitizedUsername,
                    Message = sanitizedMessage,
                    IsSentByUser = false
                };
            Messages.Add(chatMessage);
            InvokeAsync(StateHasChanged);
        }

        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        //Checks if username is filled in or not
        if (string.IsNullOrWhiteSpace(username))
        {
            isUsernameStated = false;
            StateHasChanged();
            return;
        }
        else
        {
            isUsernameStated = true;
            StateHasChanged();
        }
        //Create new message object 
        var chatMessage = new ChatMessage
            {
                Username = username,
                Message = message,
                IsSentByUser = true
            };
        Messages.Add(chatMessage);
        //Sends to server
        await hubConnection.SendAsync("SendMessage", username, message);
    }
}
