@page "/"
@using Microsoft.AspNetCore.SignalR.Client
@using System.Text.Encodings.Web
@rendermode InteractiveWebAssembly
@inject NavigationManager NavManager

<PageTitle>The Help</PageTitle>


<div class="row">
    <div class="container ">
        <div class="con">
            <div class="card-header">Chatti</div>
            <div class="card-body">
                <p class="no-username">@errorMessage</p>
                <div class="message-card">
                    <ul class="list-group">
                        @foreach (var item in Messages)
                        {
                            <li class="mb-2 message-bubble">@item</li>
                        }
                    </ul>
                </div>
                <div class="border-primary">
                    <div class="username-container">
                        <input type="text" class="username-input" @bind="username" />
                    </div>
                    <div class="message-container">
                        <textarea class="message-input-box" @bind="message" />

                    </div>
                    <button class="btn-send" @onclick="Send">Send</button>

                </div>
            </div>
            @* <div class="card-footer">
                @if (!IsConnected)
                {
                    <div class="alert alert-danger"> Chat Diconnected</div>
                }
                else
                {
                    <div class="alert alert-success"> Chat Connected</div>
                }
            </div> *@
        </div>
    </div>
</div>


@code {
    private HubConnection? hubConnection;
    private List<string> Messages = [];

    private string? username;
    private string? message;
    private string? errorMessage;

    private DateTime date = DateTime.Now;

    protected async override Task OnInitializedAsync()
    {
        
        hubConnection = new HubConnectionBuilder()
        .WithUrl(NavManager.ToAbsoluteUri("/chathub"))
        .Build();

        hubConnection.On<string, string, DateTime>("ReceiveMessage", (username, message, date) =>
        {
            string sanitizedUsername = HtmlEncoder.Default.Encode(username);
            string sanitizedMessage = HtmlEncoder.Default.Encode(message);
           
            var timeOnly = date.ToString("HH:mm");  
            var concatMessage = $"{timeOnly} {sanitizedUsername}:{sanitizedMessage}";
            Messages.Add(concatMessage);
            InvokeAsync(StateHasChanged);
        }

        
        await hubConnection.StartAsync();
    }
    private async Task Send()
    {
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Please enter a name";
            return;
        }
        else
        {
            errorMessage = "";
        }
        await hubConnection.SendAsync("SendMessage", username, message, date);
    }

    public bool IsConnected =>
        hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
   

}
